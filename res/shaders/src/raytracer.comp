#version 450

layout(local_size_x = 16, local_size_y = 16) in;

layout(push_constant) uniform push_constants {
    mat4 view;
    vec3 pos;
    int downscale;
    int tri_count;
} scene;

const float PI = 3.14159265;

const float FLOAT_MARGAIN = 0.000001;

const int WIDTH = 1280;
const int HEIGHT = 720;
const float ASPECT_RATIO = 16.0 / 9.0;

struct ray {
    vec3 pos;
    vec3 dir;
    vec3 col;
};

struct tri {
    vec3 verts[3];
    vec3 normal;
    vec3 col;
    uint mesh_id;
    uint a;
    uint b;
    uint c;
};

struct collision_data {
    bool collided;
    float dst;
};

layout(std140, set = 0, binding = 0) readonly buffer Objects {
    tri tris[];
} objs;

layout(set = 0, binding = 1, rgba8) uniform writeonly image2D img;

collision_data collision(ray r, tri t) {
    if (dot(r.dir, t.normal) > 0) {
        //return collision_data(false, 0.0);
    }

    vec3 a = t.verts[1] - t.verts[0];
    vec3 b = t.verts[2] - t.verts[0];

    vec3 axis_t = r.pos - t.verts[0];

    vec3 cross_dir_b = cross(r.dir, b);
    vec3 cross_t_a = cross(axis_t, a);

    float det = dot(cross_dir_b, a);

    float d = dot(cross_t_a, b) / det;
    float u = dot(cross_dir_b, axis_t) / det;
    float v = dot(cross_t_a, r.dir) / det;

    if (u + v > 1 || u > 1 || u < 0|| v > 1 || v < 0 || d < 0) {
        return collision_data(false, 0.0);
    } else {
        return collision_data(true, d);
    }
}

void main() {
    int x = int(gl_GlobalInvocationID.x) - (WIDTH / scene.downscale) / 2;
    int y = (HEIGHT / scene.downscale) / 2 - int(gl_GlobalInvocationID.y);

    if (x <= WIDTH / scene.downscale && y <= HEIGHT / scene.downscale) {
        float x_norm = (float(x) * ASPECT_RATIO) / float((WIDTH / scene.downscale) / 2);
        float y_norm = float(y) / float((HEIGHT / scene.downscale) / 2);

        ray r;
        r.pos = scene.pos;
        r.dir = (scene.view * normalize(vec4(x_norm, y_norm, 1, 0))).xyz;
        r.col = vec3(1, 0, 1);

        int i = 0;
        bool collided = false;

        float tri_dst = 0;
        float tri_min_dst = 1000000000;

        for (int i = 0; i < scene.tri_count; i++) {
            tri t = objs.tris[i];
            collision_data cd = collision(r, t);
            if (cd.collided) {
                collided = true;
                if (cd.dst < tri_min_dst) {
                    tri_min_dst = cd.dst;
                    r.col = objs.tris[i].normal / 2 + 0.5;
                    //r.col = objs.tris[i].col;
                }
            }
        }

        vec4 col = vec4(0.8, 0.8, 1.0, 1.0);
        if (collided) {
            col = vec4(r.col, 1.0);
        }

        imageStore(img, ivec2(gl_GlobalInvocationID.xy), col);
    }
}